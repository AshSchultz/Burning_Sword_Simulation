[gd_scene load_steps=4 format=3 uid="uid://5wkmmc64hnpd"]

[sub_resource type="GDScript" id="GDScript_6oatf"]
script/source = "class_name Player extends CharacterBody3D

@export_category(\"Player\")
@export_range(1, 35, 1) var speed: float = 10 # m/s
@export_range(10, 400, 1) var acceleration: float = 100 # m/s^2

@export_range(0.1, 3.0, 0.1, \"or_greater\") var camera_sens: float = 1

var mouse_captured: bool = false

var gravity: float = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

var move_dir: Vector2 # Input direction for movement
var look_dir: Vector2 # Input direction for look/aim

var walk_vel: Vector3 # Walking velocity 

var held_object

var pull_force = 10

@onready var interaction = $Camera/interaction
@onready var hand = $Camera/hand
@onready var camera: Camera3D = $Camera

func _ready() -> void:
	#Capture Mouse on start
	capture_mouse()

func _unhandled_input(event: InputEvent) -> void:
	if event is InputEventMouseMotion:
		look_dir = event.relative * 0.001
	if mouse_captured: 
		_rotate_camera()
	if Input.is_action_just_pressed(\"exit\"): 
		get_tree().quit()
	if Input.is_action_just_pressed(\"settings\"):
		$\"../Settings\".visible = !$\"../Settings\".visible 
		release_mouse()
	if Input.is_action_just_pressed(\"pickup\"):
		if held_object == null:
			pick_up_object()
		elif held_object != null:
			drop_object()
	if Input.is_action_just_pressed(\"rotate_object_left\"):
		if held_object != null:
			held_object.set_angular_velocity()

func _physics_process(delta: float) -> void:
	velocity = _walk(delta)
	move_and_slide()
	if held_object != null:
		var a = held_object.global_transform.origin
		var b = hand.global_transform.origin
		held_object.set_linear_velocity((b-a)*pull_force)

func capture_mouse() -> void:
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	mouse_captured = true

func release_mouse() -> void:
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	mouse_captured = false

func _rotate_camera(sens_mod: float = 1.0) -> void:
	camera.rotation.y -= look_dir.x * camera_sens * sens_mod
	camera.rotation.x = clamp(camera.rotation.x - look_dir.y * camera_sens * sens_mod, -1.5, 1.5)

func _walk(delta: float) -> Vector3:
	move_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_forward\", \"move_backwards\")
	var _forward: Vector3 = camera.global_transform.basis * Vector3(move_dir.x, 0, move_dir.y)
	var walk_dir: Vector3 = Vector3(_forward.x, 0, _forward.z).normalized()
	walk_vel = walk_vel.move_toward(walk_dir * speed * move_dir.length(), acceleration * delta)
	return walk_vel


func _on_exit_pressed() -> void:
	capture_mouse()
	$\"../Settings\".visible = !$\"../Settings\".visible 

func pick_up_object():
	var collider = interaction.get_collider()
	if collider != null and collider is RigidBody3D:
		held_object = collider
		
func drop_object():
	if held_object != null:
		held_object = null
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_juve1"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_t2dxs"]

[node name="Player" type="CharacterBody3D"]
script = SubResource("GDScript_6oatf")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_juve1")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("CapsuleMesh_t2dxs")

[node name="Camera" type="Camera3D" parent="."]

[node name="hand" type="Marker3D" parent="Camera"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -2.59286)

[node name="interaction" type="RayCast3D" parent="Camera"]
target_position = Vector3(0, 0, -5)
collide_with_areas = true
